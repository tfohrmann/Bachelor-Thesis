# Train a neuronal network of only dense layers:

# Arrange data into shape (2*n_points,)
train_data = np.concatenate((train_data,train_errors), axis=1)
train_data = np.nan_to_num(train_data, nan=-1e2)

val_data = np.concatenate((val_data,val_errors), axis=1)
val_data = np.nan_to_num(val_data, nan=-1e2)

test_data = np.concatenate((test_data,test_errors), axis=1)
test_data = np.nan_to_num(test_data, nan=-1e2)


from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(128, activation="relu", input_shape=train_data[0].shape))
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(1, activation="sigmoid"))
model.compile(optimizer="rmsprop", loss="binary_crossentropy", metrics=["accuracy"])


history = model.fit(train_data, train_labels, epochs=30, validation_data=(val_data,val_labels), batch_size=256)