# Train a covnet:

# Arrange data into shape (n_points, 2)
train_data = np.reshape(train_data, (len(train_labels), n_points, 1))
train_errors = np.reshape(train_errors, (len(train_labels), n_points, 1))
train_data = np.concatenate((train_data,train_errors), axis=2)
train_data = np.nan_to_num(train_data, nan=-1e2)

val_data = np.reshape(val_data, (len(val_labels), n_points, 1))
val_errors = np.reshape(val_errors, (len(val_labels), n_points, 1))
val_data = np.concatenate((val_data,val_errors), axis=2)
val_data = np.nan_to_num(val_data, nan=-1e2)

test_data = np.reshape(test_data, (len(test_labels), n_points, 1))
test_errors = np.reshape(test_errors, (len(test_labels), n_points, 1))
test_data = np.concatenate((test_data,test_errors), axis=2)
test_data = np.nan_to_num(test_data, nan=-1e2)


from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Conv1D(10, 9, activation="relu", input_shape=(64,2)))
#model.add(layers.Conv1D(64, 7, activation="relu"))
model.add(layers.MaxPooling1D(2))
model.add(layers.Dropout(0.2))
model.add(layers.Conv1D(10, 9, activation="relu"))
#model.add(layers.Conv1D(64, 7, activation="relu"))
model.add(layers.MaxPooling1D(2))
model.add(layers.Flatten())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(1, activation="sigmoid"))

model.compile(optimizer="rmsprop", loss="binary_crossentropy", metrics=["accuracy"])


history = model.fit(train_data, train_labels, epochs=30, validation_data=(val_data,val_labels), batch_size=256)